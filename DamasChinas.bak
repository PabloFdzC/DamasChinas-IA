#lang racket
(require racket/gui/base)
(require "board.rkt")


#|
Crea la ventana del programa, frame se puede
interpretar como una variable que contiene al
objeto que muestra la ventana
|#
(define frame (new frame%
                   [label "Damas chinas"]
                   [width 700]
                   [height 450]))
#|
  Inicializa un objeto board%
|#
(define game (new board% [turn #t]))
(send game new-game) ; Se crea un nuevo juego
#|
my-canvas% es una clase que hereda de la
clase canvas%. Se hizo de esta manera para
poder tener acceso a la interación con el mouse
|#
(define my-canvas%
  (class canvas%
    (super-new)
    (inherit/super get-dc)
    #|
      Método para interactuar con el mouse, captura la posición del 
      click izquierdo en el canvas y selecciona una de las casillas
      del tablero en caso de que corresponda
      Entradas:
      - event: objeto on-event
      Salida:
      - Ninguna
    |# 
    (define/override (on-event event)
      (if (equal? (send event get-event-type) 'left-down)
          (send game select-box (send event get-x) (send event get-y) mc (if (send game get-turn) "red" "green"))
          (void)))
    ))


#|
mc es la instanciación del canvas
|#
(define mc (new my-canvas%
     [parent frame]
     [style '(no-autoclear)]
     [paint-callback
      (lambda (canvas dc)
        (send dc set-background "black")
        (send dc clear)
        (send game print-board (send game get-current-game))
        (send game paint-board (send game get-current-game) mc) ; Se pinta el tablero inicial
        (send game paint-buttons mc)
        (send game paint-message mc "Turno de:" "Jugador" "red")
        ;(paint-board (list-ref (check-possible-moves (send game get-current-game) "red") 0) mc)
        )]))



; Muestra la ventana
(send frame show #t)
; Hace grande la ventana
;(send frame maximize #t)